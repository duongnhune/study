import { Currency } from "../enum/currency";
import { EntityType } from "../enum/entity-type";
import { Promotion } from "./promotion";
import { ReservationProduct } from "./reservation-product";
import { ReservationTicket } from "./reservation-ticket";
export interface Reservation {
    workspaceID: string;
    formID: string;
    approvalRequired: boolean;
    approveTime: number;
    cancelTime: number;
    confirmTime: number;
    createTime: number;
    customFields: any;
    email: string;
    eventID: string;
    expireTime: number;
    id: string;
    name: string;
    order: any;
    phone: string;
    refCode: string;
    approvalMessage: string;
    rejectTime: number;
    reservationTickets: ReservationTicket[];
    reservationProducts: ReservationProduct[];
    status: ReservationStatus;
    currency: Currency;
    lockedPrices: ReservationLockedPrice[];
    lockedDiscount: number;
    lockedShippingFee: number;
    lockedShippingDiscount: number;
    lockedTotalPrice: number;
    appliedPromotionIDs: string[];
    shippingAddress: AddressInfo;
    appliedPromotions?: Promotion[];
}
export interface AddressInfo {
    fullName: string;
    phone: string;
    addressLine1: string;
    addressLine2: string;
    ward: string;
    district: string;
    province: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
}
export interface ReservationLockedPrice {
    itemType: EntityType;
    itemID: string;
    lockUnitPrice: number;
    appliedPromotionID: string;
}
export declare enum ReservationStatus {
    None = "",
    Draft = "draft",// after organizer created
    Hold = "hold",// after selecting seat or ticket
    PendingApproval = "pending-approval",// after filling in form
    PendingPayment = "pending-payment",// after filling in form
    Confirmed = "confirmed",// after payment
    Cancelled = "cancelled",// after expired or cancelled
    Approved = "approved",// after expired or cancelled
    Rejected = "rejected"
}
//# sourceMappingURL=reservation.d.ts.map